to know the SQL , relations , keep things online

user given facade that we are inside a folder

only one schema --> self relationships ** VIMP **

clerk for auth --> with no branding
heroui for ui
image kit for handling the images --> restrict files types to be uploaded
neon postgres for database
drizzle as ORM (Object Relational Mapping) --> schemaas , relations , 
latest nextjs --> security by middleware in nextjs 
zod --> page validation library

1. npx create-next-app@latest .

full stack app :
auth -> clerk
business logic -> store info -> design schema -> 
storage -> imagekit

on backend we use ORM (drizzle here) to interact with DB (postgresql -- > neon)

in schemas folder we have zod schema for signin and signup

next.js , zod ,react hook form and clerk for auth with own custom branding
clerk == user management platform

using zod as form resolver

imagekit --> media delivey and management platform
its a media processing api
so they store the data and applies their media processing engine
also applies the AI features on it --> like expand , make circular , img optimizations

How to handle folder --

1. create entry point
2. auth with clerk
3. take input from user --> folder name
4. also take and match user id
5. validation for foldername
6. parentID check
7. if yes then verify --> match the parentID --> must belong to user --> should be a folder --> create folder --> insert in DB
8. if no --> mark as null as considering it as root item

hence we can say that folder is just the path and used to display in frontend
the actual data will come in files only 

GET route for files --

simply first auth the user
then check for parent if any
return the files with same userID by matching them and the returning response

HOW TO MAKE ENDPOINT FOR UPLOAD FILE  --

1. take a form data
2. upload image to imagekit
3. inside POSt route make a auth user
4. parse form data
5. match with userID form backend
6. put file validation
7. check for parentID
8. if yes --> ensure that it exists --> it belongs to the user --> check as it should be folder --> 
9. upload in root directory
10. check for file type --> only image and pdf are allowed
11. convert file to buffer --> imaekit converts the file to buffer
12. finally generate a file name